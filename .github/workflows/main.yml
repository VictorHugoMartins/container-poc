name: Build and Push Docker Image to ACR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1 - Code checkout
      - uses: actions/checkout@v4

      # 2 - Login no Azure
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3 - Comando Docker Login no ACR
      - name: Docker login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_NAME }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      # 4 - Construir a imagem com a tag mais recente (latest) e a tag baseada no commit SHA
      - name: Build and Tag image
        id: build-image
        run: |
          IMAGE_TAG=${{ secrets.ACR_NAME }}/${{ secrets.IMAGE_NAME }}:latest
          docker build . -t $IMAGE_TAG
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 5 - Enviar a imagem para o ACR
      - name: Push image to ACR
        run: docker push ${{ steps.build-image.outputs.image_tag }}

      # 6 - Definir o Contexto do AKS (CORRIGIDO)
      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          # A Action agora usa o Service Principal (AZURE_CREDENTIALS) do Passo 2 para autenticação.
          # Fornecemos apenas o nome e o grupo do cluster.
          resource-group: k8scluster_group 
          cluster-name: clusterk8s

      # 7 - Criar o namespace se ele não existir
      - name: Create namespace if not exists
        run: |
          kubectl create namespace azure-store-1758905293727 --dry-run=client -o yaml | kubectl apply -f -

      # 7a - Criar o Secret com as variáveis de conexão do BD
      - name: Create Kubernetes Secret
        run: |
          # NOTA: O nome do Secret deve ser 'app-config-secret' ou outro nome de sua escolha
          kubectl create secret generic app-config-secret \
            --namespace azure-store-1758905293727 \
            --from-literal=DB_PASS=${{ secrets.DB_PASS }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # 7b - Criar o Secret com a Chave JSON do GCP
      - name: Create Kubernetes Secret for GCP Service Account
        # O comando usa 'kubectl create secret generic' para criar um secret
        # A flag --from-literal usa o valor do Secret do GitHub (secrets.GCP_SERVICE_ACCOUNT_JSON)
        # O valor é armazenado com a chave 'gcp-service-account.json' dentro do Secret do K8s.
        run: |
          kubectl create secret generic gcp-svc-key \
            --namespace azure-store-1758905293727 \
            --from-literal=gcp-service-account.json='${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}' \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          # Certifique-se de que sua variável NAMESPACE esteja definida aqui ou globalmente
          NAMESPACE: azure-store-1758905293727

      - name: Clean Up Conflicting Ingress Namespace
        uses: azure/k8s-actions/k8s-actions@v4
        with:
          arguments: delete namespace ingress-basic --ignore-not-found=true
          
      #  8 - Aplicar o Manifesto Kubernetes (Deployment e HPA)
      - name: Deploy to AKS
        uses: azure/k8s-deploy@v4
        with:
          # Inclua o novo arquivo hpa-hello-python.yaml aqui
          manifests: |
            hello-python.yaml
            hello-python-hpa.yaml
            hello-python-ingress.yaml
            cluster-issuer.yaml
          images: |
            ${{ steps.build-image.outputs.image_tag }}
          namespace: azure-store-1758905293727